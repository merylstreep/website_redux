{"version":3,"sources":["assets/ring.png","assets/ExternalLinks.tsx","components/NavBar.tsx","components/Landing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Links","useStyles","makeStyles","theme","createStyles","nav","paddingLeft","display","paddingTop","textAlign","width","item","paddingRight","comingSoon","color","NavBar","classes","className","Tooltip","title","placement","Typography","onClick","window","open","root","margin","background","height","center","position","top","ring","resumeButton","marginLeft","spacing","backgroundColor","justifyContent","Landing","src","alt","Grid","container","variant","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,uMCA9BC,EACF,iCADEA,EAEA,uCAFAA,EAGF,qE,yBCGLC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,IAAK,CACHC,YAAa,GACbC,QAAS,OACTC,WAAY,OACZC,UAAW,SACXC,MAAO,OAETC,KAAM,CACJL,YAAa,GACbM,aAAc,IAEhBC,WAAY,CACVP,YAAa,GACbM,aAAc,GACdE,MAAO,gBA8CEC,EAvCuB,WACpC,IAAMC,EAAUf,IAEhB,OACE,uBAAKgB,UAAWD,EAAQX,KACtB,gBAACa,EAAA,EAAD,CAASC,MAAO,eAAiBC,UAAW,OAC1C,uBAAKH,UAAWD,EAAQH,YACtB,gBAACQ,EAAA,EAAD,KACE,0CAKN,uBAAKJ,UAAWD,EAAQL,MACtB,gBAACU,EAAA,EAAD,KACE,qBACEC,QAAS,WACPC,OAAOC,KAAKxB,KAFhB,YASJ,uBAAKiB,UAAWD,EAAQL,MACtB,gBAACU,EAAA,EAAD,KACE,qBACEC,QAAS,WACPC,OAAOC,KAAKxB,KAFhB,gBC/CJC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXqB,KAAM,CACJC,OAAQ,GACRC,WAAY,OACZC,OAAQ,QAEVC,OAAQ,CACNC,SAAU,WACVC,IAAK,OAEPC,KAAM,CACJF,SAAU,WACVC,IAAK,MAEPE,aAAc,CACZC,WAAY/B,EAAMgC,QAAQ,GAC1B,UAAW,CACTC,gBAAiB,YAGrB/B,IAAK,CACHE,QAAS,OACT8B,eAAgB,mBAuDPC,EAjDqC,WAClD,IAAMtB,EAAUf,IAEhB,OACE,yBAAKgB,UAAWD,EAAQS,MACtB,yBACEc,IAAKP,IACLQ,IAAK,2CACLvB,UAAWD,EAAQgB,OAErB,kBAACS,EAAA,EAAD,CAAMC,WAAS,EAACzB,UAAWD,EAAQa,QACjC,kBAACY,EAAA,EAAD,CAAMC,WAAS,EAACzB,UAAWD,EAAQX,KACjC,kBAACgB,EAAA,EAAD,CAAYsB,QAAS,MAArB,SACA,kBAAC,EAAD,OAEF,kBAACF,EAAA,EAAD,KACE,6BACA,kBAACpB,EAAA,EAAD,0CAEE,6BAFF,mDAIE,6BAJF,0BAME,kBAACH,EAAA,EAAD,CAASC,MAAK,yCACZ,uBACEG,QAAS,cADX,oEAQJ,6BACA,6BACA,kBAACD,EAAA,EAAD,KACE,uBACEC,QAAS,WACPC,OAAOC,KAAKxB,KAFhB,sBC3DG4C,EARO,WACpB,OACE,oCACE,kBAAC,EAAD,QCIcC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.81af7680.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ring.d6c8bd35.png\";","export const Links = {\n  github : \"https://github.com/merylstreep\",\n  linkedin : \"https://www.linkedin.com/in/harry-z/\",\n  resume : \"https://drive.google.com/open?id=1fayl5PojpzPKCr1UVjxp0pZUfcLS_0_g\"\n}\n","import * as React from \"react\";\nimport { Theme, Tooltip, Typography } from \"@material-ui/core\";\nimport { Links } from \"../assets/ExternalLinks\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { createStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nav: {\n      paddingLeft: 24,\n      display: \"flex\",\n      paddingTop: \"27px\",\n      textAlign: \"center\",\n      width: \"40%\"\n    },\n    item: {\n      paddingLeft: 24,\n      paddingRight: 24\n    },\n    comingSoon: {\n      paddingLeft: 24,\n      paddingRight: 24,\n      color: \"#959595\"\n    }\n  })\n);\n\ninterface NavBarProps {}\n\nconst NavBar: React.FC<NavBarProps> = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.nav}>\n      <Tooltip title={\"coming soon!\"}  placement={'top'}>\n        <div className={classes.comingSoon}>\n          <Typography>\n            <a>highlights</a>\n          </Typography>\n        </div>\n      </Tooltip>\n\n      <div className={classes.item}>\n        <Typography>\n          <a\n            onClick={() => {\n              window.open(Links.github);\n            }}\n          >\n            github\n          </a>\n        </Typography>\n      </div>\n      <div className={classes.item}>\n        <Typography>\n          <a\n            onClick={() => {\n              window.open(Links.linkedin);\n            }}\n          >\n            linkedin\n          </a>\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\r\nimport { Grid, Theme, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Links } from \"../assets/ExternalLinks\";\r\nimport { createStyles } from \"@material-ui/styles\";\r\nimport ring from \"../assets/ring.png\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 60,\r\n      background: \"none\",\r\n      height: \"100%\"\r\n    },\r\n    center: {\r\n      position: \"absolute\",\r\n      top: \"50%\"\r\n    },\r\n    ring: {\r\n      position: \"absolute\",\r\n      top: \"0%\"\r\n    },\r\n    resumeButton: {\r\n      marginLeft: theme.spacing(2),\r\n      \"&:hover\": {\r\n        backgroundColor: \"#ffffe8\"\r\n      }\r\n    },\r\n    nav: {\r\n      display: \"flex\",\r\n      justifyContent: \"flex-start\"\r\n    }\r\n  })\r\n);\r\nexport interface BodyProps {}\r\n\r\nconst Landing: React.FunctionComponent<BodyProps> = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <img\r\n        src={ring}\r\n        alt={\"i dont know what this is but looked nice\"}\r\n        className={classes.ring}\r\n      />\r\n      <Grid container className={classes.center}>\r\n        <Grid container className={classes.nav}>\r\n          <Typography variant={\"h3\"}>harry</Typography>\r\n          <NavBar />\r\n        </Grid>\r\n        <Grid>\r\n          <br />\r\n          <Typography>\r\n            aerospace and software engineering\r\n            <br />\r\n            penultimate at the university of new south wales\r\n            <br />\r\n            {`completing a thesis on `}\r\n            <Tooltip title={`Still working out what this is myself`}>\r\n              <a\r\n                onClick={() => {\r\n                }}\r\n              >\r\n                {`improved turbulence modelling using gene expression techniques`}\r\n              </a>\r\n            </Tooltip>\r\n          </Typography>\r\n          <br />\r\n          <br />\r\n          <Typography>\r\n            <a\r\n              onClick={() => {\r\n                window.open(Links.resume);\r\n              }}\r\n            >\r\n              see my resume\r\n            </a>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Landing from \"./components/Landing\";\n\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Landing />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}